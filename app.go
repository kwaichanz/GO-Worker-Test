package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/gin-gonic/gin"
)

func typeof(v interface{}) string {
	return fmt.Sprintf("%T", v)
}

type Location struct {
	Point Point `json:"point"`
}

type Response struct {
	ResourceSets []struct {
		Resources []Location `json:"resources"`
	} `json:"resourceSets"`
}

type Point struct {
	Type        string    `json:"type"`
	Coordinates []float64 `json:"coordinates"`
}

type AutoGenerated struct {
	AuthenticationResultCode string   `json:"authenticationResultCode"`
	BrandLogoURI             string   `json:"brandLogoUri"`
	Copyright                string   `json:"copyright"`
	ErrorDetails             []string `json:"errorDetails"`
	ResourceSets             []any    `json:"resourceSets"`
	StatusCode               int      `json:"statusCode"`
	StatusDescription        string   `json:"statusDescription"`
	TraceID                  string   `json:"traceId"`
}

func main() {

	// jsonData := `{
	// 	"resourceSets": [
	// 		{
	// 			"resources": [
	// 				{
	// 					"point": {
	// 						"type": "Point",
	// 						"coordinates": [
	// 							13.36210632,
	// 							100.98371124
	// 						]
	// 					}
	// 				}
	// 			]
	// 		}
	// 	]
	// }`

	r := gin.Default()

	r.GET("/getCor", func(c *gin.Context) {

		url := c.Query("url")

		fmt.Printf("Data: %s", url)
	})

	r.GET("/getCoor", func(c *gin.Context) {
		//http client
		client := &http.Client{}

		url := c.Query("url")
		urlKey := url + "&key=AiQY1lzrOvfuNvSLFT5eRdk87D_koIl5VdJ_ziv3ybT2SlDYqyhrO5tSrCRYJ3Pj"

		//http://dev.virtualearth.net/REST/v1/Locations?locality=Chonburi&key=AiQY1lzrOvfuNvSLFT5eRdk87D_koIl5VdJ_ziv3ybT2SlDYqyhrO5tSrCRYJ3Pj
		fmt.Println("URL : ", urlKey)
		//prep the req
		req, err := http.NewRequest(http.MethodGet, urlKey, nil)
		if err != nil {
			c.String(http.StatusInternalServerError, err.Error())
			return
		}

		//send the req
		resp, err := client.Do(req)
		if err != nil {
			c.String(http.StatusInternalServerError, err.Error())
			return
		}

		defer resp.Body.Close()

		//read the resp body
		body, err := ioutil.ReadAll(resp.Body)
		if err != nil {
			c.String(http.StatusInternalServerError, err.Error())
			return
		}
		fmt.Println("BOOOOOOO DYYYYY : ", string(body))

		// Parse the JSON response
		var response Response
		err = json.Unmarshal([]byte(body), &response)
		if err != nil {
			c.String(http.StatusInternalServerError, err.Error())
			fmt.Println("Error:", err)
			return
		}

		// Access the desired value from the response data
		fmt.Printf("Coor : %s", response.ResourceSets[0].Resources[0].Point.Coordinates)
		// coor := response.ResourceSets[0].Resources[0].Point.Coordinates

		if len(response.ResourceSets) > 0 && len(response.ResourceSets[0].Resources) > 0 {
			Location := response.ResourceSets[0].Resources[0]
			coordinates := Location.Point.Coordinates
			fmt.Println("Coordinates: ", coordinates)
			fmt.Println("City? : ", Location)
		}

		Location := response.ResourceSets[0].Resources[0]
		coordinates := Location.Point.Coordinates[0]
		coordinate2 := Location.Point.Coordinates[1]

		// Send the extracted value as the response
		c.String(http.StatusOK, "%f %f", coordinates, coordinate2)
	})

	// port := os.Getenv("PORT")
	// if port == "" {
	// 	port = "8080"
	// }
	// if err := r.Run(":" + port); err != nil {
	// 	log.Panicf("error: %s", err)
	// }
	r.Run(":8080")
}
